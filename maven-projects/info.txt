20190106:
	- a pom.xml-t ebből szedtem:
		- https://github.com/LWJGL/lwjgl3-demos/blob/master/pom.xml
	- sikerült lefordítani és elindítani a prg-t a maven-projects dir alól
		- mvn dependency:copy-dependencies
		- mvn exec:java -Dexec.mainClass="test.HelloOpenVR"
		- csak úgy indult el, hogy 
			- az openvr GitHub projekt alól idemásoltam a 64 bites dll-t:
				- GitHub\openvr\bin\win64\openvr_api.dll
			- innen letöltöttem a dll-t
				https://build.lwjgl.org/stable/windows/x64/lwjgl_openvr.dll
	- futtatás:
		- összedugtam a kütyüt, de a steamvr nem futott, kontrollerek nem voltak beizzítva
		- felvillant egy ablak, de rögtön el is tűnt
		- output
			D:\w0rk\GitHub\lwjgl3-vr-test1\maven-projects>mvn exec:java -Dexec.mainClass="test.HelloOpenVR"
			[INFO] Scanning for projects...
			[INFO]
			[INFO] ------------------------< test:lwjgl3-vr-test1 >------------------------
			[INFO] Building lwjgl3-vr-test1 1.0
			[INFO] --------------------------------[ jar ]---------------------------------
			[INFO]
			[INFO] --- exec-maven-plugin:1.6.0:java (default-cli) @ lwjgl3-vr-test1 ---
			VR_IsRuntimeInstalled() = true
			VR_RuntimePath() = D:\Games\Steam\steamapps\common\SteamVR\
			VR_IsHmdPresent() = true
			Model Number : VIVE_Pro MV
			Serial Number: LHR-7EC6B64C
			Recommended width : 2518
			Recommended height: 2798
			[INFO] ------------------------------------------------------------------------
			[INFO] BUILD SUCCESS
			[INFO] ------------------------------------------------------------------------
			[INFO] Total time:  4.032 s
			[INFO] Finished at: 2019-01-06T17:40:56+01:00
			[INFO] ------------------------------------------------------------------------
	- maven native cuccokhoz:
		- https://www.humboldt.co.uk/wrapping-a-native-library-with-maven/
	- javítottam a pom.xml-en, így már csak a openvr_api.dll kell, de az is valahogy benne van az lwjgl distro-ban, mert build-eli az lwjgl3...
		- innen is le lehet tölteni:
			- https://build.lwjgl.org/stable/windows/x64/openvr_api.dll
		- sikerült a natíve részét megoldani ennek "openvr_api.dll"
	- fejlesztés ramdisk-en
	- G-SYNC NVidia cikk:
		- https://www.blurbusters.com/gsync/gsync101-input-lag-tests-and-settings/14/
		- https://ipon.hu/magazin/cikk/asus-pg278q-nvidia-g-sync-kel-a-megjelenites-jovoje
	- újabb git repo:
		- https://github.com/matinas/openvrsimplexamples
			- gyönyörű kis prg tutorial-al
			- https://skarredghost.com/2018/03/15/introduction-to-openvr-101-series-what-is-openvr-and-how-to-get-started-with-its-apis/
		- https://github.com/matinas/openvrexamples

20190108:
	- ha nem indítom el a steamvr-t, akkor megpróbálja elindítani a rendszer, de akkor nem jelzi még ki az eszközöket
	- ha elindítom a steamvr-t, és futnak az eszközök, és utána indítom el a prg-t, akkor ezt írja ki
		- ezek az infók jönnek 1 controller bekapcsolásakor
			VR_IsRuntimeInstalled() = true
			VR_RuntimePath() = D:\Games\Steam\steamapps\common\SteamVR\
			VR_IsHmdPresent() = true
			token=1
			Model Number : VIVE_Pro MV
			Serial Number: LHR-7EC6B64C
			id=0,trackedDeviceClass=1
			TrackingSystemName: lighthouse
			ModeLabel:
			ModelNumber: VIVE_Pro MV
			id=1,trackedDeviceClass=4
			TrackingSystemName: lighthouse
			ModeLabel: 1
			ModelNumber: Valve SR
			id=2,trackedDeviceClass=4
			TrackingSystemName: lighthouse
			ModeLabel: 2
			ModelNumber: Valve SR
			id=3,trackedDeviceClass=2
			TrackingSystemName: lighthouse
			ModeLabel:
			ModelNumber: VIVE Controller Pro MV
			countBaseStations=2
			Recommended width : 2518
			Recommended height: 2798
			calling VR_ShutdownInternal...
			VR_ShutdownInternal...end
	- 2518/2798 kb = 1440/1600
	- találtam lwjgl3 vr kódot:
		- https://github.com/justinmarentette11/Tower-Defense-Galaxy/tree/master/desktop/src/com/badlogic/gdx/vr
		- https://github.com/libgdx/libgdx

20200109:
	- úgy látom az lwjgl3 openvr része egy nagyon egyszerű linkelés az openvr api-ra
		- emiatt azt gondoltam, hogy a c++-os API tutorialt átalakítom java lwjgl3-as verzióra
		- találtam 2 tutorialt
			- az openvr API tartalmaz egy sample app-ot, amelyben sok egymástól adott távolságra levő kocka közt nézelődhetek
			- https://gitlab.com/stevenSchuerstedt/openvr-tutorial
				- ez jobbnak tűnik...
	- bonyi rész az openvr API-ban a "Action Manifest files", erről egy leírás...
		- https://github.com/ValveSoftware/openvr/wiki/Action-manifest

20200111:
	- találtam egy jó kis videót: (youtube keresés: unity steamvr plugin tutorial)
		- [Unity] SteamVR 2.0 Input using Actions
			- https://www.youtube.com/watch?v=bn8eMxBcI70
		- nagyon jól elmagyarázza mit kell csinálni
		- megnéztem a "Windows/SteamVR Input Live View" menüben, hogy a kontroller a szemüveghez képest mutatja a "pose" értékeket
			- van benne 3 float érték (x,y,z) a kontoller szemüveghez viszonyított pozíciójára
			- van benne 4 float érték (quaternion szerintem) a kontoller irányára
		- ebből már el tudok indulni

20200112:
	- Visual Studio format code shortcut:
		- https://stackoverflow.com/questions/5755942/how-do-you-auto-format-code-in-visual-studio
		- Tools -> options -> Environment -> keyboard, itt "Edit.formatselection"
	- Valami elképesztő jó demo-t sikerült letölteni:
		- futtatható verzió:
			- https://hunter-bobeck.itch.io/the-moon-motion-zone
			- 150 MB-os Unity runtime csomag: Build.exe-vel indítható, és gyönyörű prg!
		- Git verzió, sajnos nem tudom lefordítani...

20200201:
	- találtam lwjgl tutorial-t:
		- https://github.com/lwjglgamedev/lwjglbook.git
		- ebben az első FBO teszt:
			- lwjglbook\chapter18\c18-p1\
			- csak úgy fordult nálam, hogy a pom-xml-ben kicseréltem a java verziót 11->8 -ra (151-sor):
				<java.version>8</java.version>
			- fordult és futott is, de túl bonyi a kód... sok a körítés
			- mvn exec:java -Dexec.mainClass="org.lwjglb.game.Main"
	- kiindulok a chapter01 kódból és megpróbálom megcsinálni a gyönyörű opengl tutorial-os FBO kódot:
		- https://github.com/JoeyDeVries/LearnOpenGL.git
			- ebben ez a szép kód van:
				- LearnOpenGL\src\4.advanced_opengl\5.1.framebuffers\framebuffers.cpp
	- kész a test.gl01 prg minimal lwjgl3-as prg
	- kész a test.gl02 prg minimal lwjgl3-as prg shader-ekkel render class-al kiegészítve
		- ez lényegében ugyanaz, mint a LearnOpenGL\src\1.getting_started\2.1.hello_triangle
			- csak sokkal szebb :)
	- most már bizakodó vagyok...
		- ezen kódok alapján meg tudom csinálni a framebuffer-eket használó sima lwjgl-es prg-t, aztán meg már csak vr-os kódot kell csinálni belőle...
	-  a további lépések:
		- egy camera class kell, hogy a perspektívát lássam hogyan kell megalkotni
		- egy időzítés kell, hogy lássak kis mozgást
		- fbo készítés
		- 2 fbo készítés egyszerre kirakni a window-ba
		- ezután már csak párosítani kell a standard openvr-es cpp kódot és a java kódot... jaj de izgi

20200202:
	- el vagyok keseredve, a math lib-ek nagyon komplex-ek..., nem tudtam haladni a kamera kezeléssel... quat rémálom...
		- java glm:
			- https://github.com/java-graphics/glm.git
		- JOML:
			- https://github.com/JOML-CI/JOML.git
		- sajat quat (jogl-ból)

20200209:
	- nagyon fontos, hogy ha vertex shader-t használunk, akkor az x és y is csak -1..+1 értéket vehet fel, a többi nem renderelődik!
		- https://learnopengl.com/Getting-started/Hello-Triangle
			Normalized Device Coordinates (NDC)
			Once your vertex coordinates have been processed in the vertex shader, they should be in normalized device coordinates which is a small space where the x, y and z values vary from -1.0 to 1.0. 
			Any coordinates that fall outside this range will be discarded/clipped and won't be visible on your screen. 
	- mindenképpen érdemes shader-eket használni, mert így a GPU mem-be előre felküldött adatokon tudunk dolgozni
	- a transzformációkhoz ez nagyon jó:
		- https://learnopengl.com/Getting-started/Coordinate-Systems
	- By convention, OpenGL is a right-handed system.
	- Vclip = Mprojection x Mview x Mmodel x Vlocal
		- fordított sorrend
		- a Vclip a shader-ben a gl_Position
	- az eddig használt "saját" quaternion class-ból a fromAngles megfelelője a JOML:rotationXYZ
	- infinite plane as horizon:
		- https://stackoverflow.com/questions/12965161/rendering-infinitely-large-plane
		- még nem értem...
	- na ez érdekes lehet:
		- https://developer.nvidia.com/gpugems/gpugems2/part-ii-shading-lighting-and-shadows/chapter-16-accurate-atmospheric-scattering
		- https://developer.nvidia.com/gpugems/gpugems2/part-i-geometric-complexity/chapter-2-terrain-rendering-using-gpu-based-geometry
			- ebből futtatható kód is van:
				- https://code.google.com/archive/p/gpu-geometry-clipmaps-minimal-terrain-engine/source/default/source
	- shader online tester:
		- http://shdr.bkcore.com/
	- végre működik az fbo-s változat...
		- fekete képernyőt mutatott sokáig csak...
			- megoldás az volt, hogy a renderTextureToScreen fgv-ben meg kellett adni "glViewport( 0,0,Main.WIDTH,Main.HEIGHT )"
	- működik úgy is, hogy nem csak renderbuffereket hozok létre, hanem sima texture buffer-t + depth buffert...
	- működik úgy is, hogy depth beffernek ezek közül bármelyiket adom meg:
		- GL_DEPTH24_STENCIL8
		- GL_DEPTH_COMPONENT
	-  nem tudtam megcsinálni, hogy egy vao-ban két féle dolgot tudjak renderelni
		- pl háromszögeket, majd line-okat... glDrawRangeElements... nem működött...
		- külön vao-t kellett csinálni 2 vonal miatt...
	- külön vao-t kellene definiálni a renderelt buffer kirakására a screen bufferre...
	- nem tudom, miért gyorsul fel a forgás a gl03\MultisampledFbo2Demo.java prg-ben...
		- nagyon bosszant

20200215:
	- próbáltam az eredeti openvr sample.cpp alapján készíteni egy olyen prg-t, amely kiírja a hmd és kontrollerek pozícióját
		- openvr-myhellovr\my-openvr-samples\openvr-sample-orig\src\hellovr_opengl_main.cpp
		- mindig csupa 0 array-t ad vissza
	- elképesztő szívás volt a bufferekkel, pointerekkel...
		- végül sikerült megcsinálni, hogy működjön a kontroller button figyelés...
		- az VRInput_UpdateActionState 2. paramétere volt a ludas, azt gondoltam, hogy oda a darabszámot kell megadni, de nem, hanem a buffer méretét!!! Gonosz!
	- így most megy a java-s prg
		- készítettem a https://github.com/fugedizsolt/openvr-myhellovr.git repos-ba egy testvr1 projektet:
			- openvr-myhellovr\my-openvr-samples\testvr1\testvr1.vcxproj
			- ebben ugyanaz van implementálva, mint ebben a java prg-ben...
			- kb 10 teljes óra munka van csak ebben a bug-ban...

20200216:
	- letisztáztam és készítettem a testvr01 package-ben test prgt, amely tisztán csak a kapcsolatot hozza létre és ellenőrzi a gombokat, kírja a mátrixokat
	- készítek egy testvr02 prg-t, amely opengl-el csak framebuffer-eket renderelve a hmd-re a 2 szemre azonos képeket tesz ki
		- https://stackoverflow.com/questions/2602013/read-whole-ascii-file-into-c-stdstring
	- c++ readFileAsString
		- ifstream autoclose open file
			- http://www.cplusplus.com/reference/fstream/ifstream/close/
	- elvileg készen lenne a hmd renderelés, de a hmd-ben csak szürkeség látszik...
		- tesztelni kell, mit rontottam el... megint rohadt sok szívás lesz...
		- meg kell nézni, mi a projekciós mátrix, milyen koordináták lehetnek a screen-en... kiírni pontokat... rengeteg teszt


x
